<div id="vortex-screensaver">
    <div class="vortex-title">АКТИВИРОВАН РЕЖИМ ОЖИДАНИЯ</div>
    <canvas id="vortex-canvas"></canvas>
</div>

<style>
    #vortex-screensaver {
        position: fixed;
        top: 0; left: 0;
        width: 100%; height: 100%;
        background: #000;
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: sans-serif;
        color: rgba(255, 255, 255, 0.3);
        overflow: hidden;
    }
    .vortex-title {
        position: absolute;
        z-index: 2;
        font-size: 1.5rem;
        letter-spacing: 4px;
    }
    #vortex-canvas {
        position: absolute;
        top: 0; left: 0;
    }
</style>

<script>
    (function vortex() {
        const canvas = document.getElementById('vortex-canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const particles = [];
        const particleCount = 2000;
        const mouse = { x: null, y: null, radius: 100 };

        // Следим за мышью
        canvas.addEventListener('mousemove', (e) => {
            mouse.x = e.x;
            mouse.y = e.y;
        });
        canvas.addEventListener('mouseout', () => {
            mouse.x = null;
            mouse.y = null;
        });

        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.size = Math.random() * 1.5 + 0.5;
                this.speedX = 0;
                this.speedY = 0;
            }
            update() {
                // Рассчитываем направление к центру холста
                let dx = canvas.width / 2 - this.x;
                let dy = canvas.height / 2 - this.y;
                let distance = Math.sqrt(dx * dx + dy * dy);
                let force = distance * 0.0001; // Сила притяжения к центру

                this.speedX += dx / distance * force;
                this.speedY += dy / distance * force;

                // Добавляем сопротивление для плавности
                this.speedX *= 0.99;
                this.speedY *= 0.99;

                this.x += this.speedX;
                this.y += this.speedY;

                // Взаимодействие с курсором
                if (mouse.x && mouse.y) {
                    let dxMouse = mouse.x - this.x;
                    let dyMouse = mouse.y - this.y;
                    let distanceMouse = Math.sqrt(dxMouse * dxMouse + dyMouse * dyMouse);
                    if (distanceMouse < mouse.radius) {
                        this.speedX -= dxMouse / distanceMouse * 0.5;
                        this.speedY -= dyMouse / distanceMouse * 0.5;
                    }
                }

                // Если частица ушла далеко за центр, перемещаем её на противоположную сторону
                if (distance > canvas.width * 0.7) {
                    this.x = Math.random() * canvas.width;
                    this.y = Math.random() * canvas.height;
                    this.speedX = 0;
                    this.speedY = 0;
                }
            }
            draw() {
                const hue = (Math.atan2(this.speedY, this.speedX) * 180 / Math.PI + 360) % 360;
                ctx.fillStyle = `hsl(${hue}, 100%, 60%)`;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        // Создаём частицы
        for (let i = 0; i < particleCount; i++) {
            particles.push(new Particle());
        }

        function animate() {
            // Вместо очистки canvas, рисуем полупрозрачный чёрный прямоугольник для шлейфа
            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            particles.forEach(particle => {
                particle.update();
                particle.draw();
            });

            requestAnimationFrame(animate);
        }

        animate();
    })();
</script>
